[
  {
    "name": "ExpGolomb#readSPS",
    "filePath": "src/demux/exp-golomb.js",
    "lines": [
      {
        "lineNumber": 158,
        "line": "  /**"
      },
      {
        "lineNumber": 159,
        "line": "   * Read a sequence parameter set and return some interesting video"
      },
      {
        "lineNumber": 160,
        "line": "   * properties. A sequence parameter set is the H264 metadata that"
      },
      {
        "lineNumber": 161,
        "line": "   * describes the properties of upcoming video frames."
      },
      {
        "lineNumber": 162,
        "line": "   * @param data {Uint8Array} the bytes of a sequence parameter set"
      },
      {
        "lineNumber": 163,
        "line": "   * @return {object} an object with configuration parsed from the"
      },
      {
        "lineNumber": 164,
        "line": "   * sequence parameter set, including the dimensions of the"
      },
      {
        "lineNumber": 165,
        "line": "   * associated video frames."
      },
      {
        "lineNumber": 166,
        "line": "   */"
      },
      {
        "lineNumber": 167,
        "line": "  readSPS () {"
      }
    ],
    "codeParams": [],
    "docParams": [
      "data"
    ]
  },
  {
    "name": "MP4Demuxer.parseInitSegment",
    "filePath": "src/demux/mp4demuxer.js",
    "lines": [
      {
        "lineNumber": 226,
        "line": "  /**"
      },
      {
        "lineNumber": 227,
        "line": "   * Parses an MP4 initialization segment and extracts stream type and"
      },
      {
        "lineNumber": 228,
        "line": "   * timescale values for any declared tracks. Timescale values indicate the"
      },
      {
        "lineNumber": 229,
        "line": "   * number of clock ticks per second to assume for time-based values"
      },
      {
        "lineNumber": 230,
        "line": "   * elsewhere in the MP4."
      },
      {
        "lineNumber": 231,
        "line": "   *"
      },
      {
        "lineNumber": 232,
        "line": "   * To determine the start time of an MP4, you need two pieces of"
      },
      {
        "lineNumber": 233,
        "line": "   * information: the timescale unit and the earliest base media decode"
      },
      {
        "lineNumber": 234,
        "line": "   * time. Multiple timescales can be specified within an MP4 but the"
      },
      {
        "lineNumber": 235,
        "line": "   * base media decode time is always expressed in the timescale from"
      },
      {
        "lineNumber": 236,
        "line": "   * the media header box for the track:"
      },
      {
        "lineNumber": 237,
        "line": "   * ```"
      },
      {
        "lineNumber": 238,
        "line": "   * moov > trak > mdia > mdhd.timescale"
      },
      {
        "lineNumber": 239,
        "line": "   * moov > trak > mdia > hdlr"
      },
      {
        "lineNumber": 240,
        "line": "   * ```"
      },
      {
        "lineNumber": 241,
        "line": "   * @param init {Uint8Array} the bytes of the init segment"
      },
      {
        "lineNumber": 242,
        "line": "   * @return {object} a hash of track type to timescale values or null if"
      },
      {
        "lineNumber": 243,
        "line": "   * the init segment is malformed."
      },
      {
        "lineNumber": 244,
        "line": "   */"
      },
      {
        "lineNumber": 245,
        "line": "  static parseInitSegment (initSegment) {"
      }
    ],
    "codeParams": [
      "initSegment"
    ],
    "docParams": [
      "init"
    ]
  },
  {
    "name": "MP4Demuxer.getStartDTS",
    "filePath": "src/demux/mp4demuxer.js",
    "lines": [
      {
        "lineNumber": 284,
        "line": "  /**"
      },
      {
        "lineNumber": 285,
        "line": " * Determine the base media decode start time, in seconds, for an MP4"
      },
      {
        "lineNumber": 286,
        "line": " * fragment. If multiple fragments are specified, the earliest time is"
      },
      {
        "lineNumber": 287,
        "line": " * returned."
      },
      {
        "lineNumber": 288,
        "line": " *"
      },
      {
        "lineNumber": 289,
        "line": " * The base media decode time can be parsed from track fragment"
      },
      {
        "lineNumber": 290,
        "line": " * metadata:"
      },
      {
        "lineNumber": 291,
        "line": " * ```"
      },
      {
        "lineNumber": 292,
        "line": " * moof > traf > tfdt.baseMediaDecodeTime"
      },
      {
        "lineNumber": 293,
        "line": " * ```"
      },
      {
        "lineNumber": 294,
        "line": " * It requires the timescale value from the mdhd to interpret."
      },
      {
        "lineNumber": 295,
        "line": " *"
      },
      {
        "lineNumber": 296,
        "line": " * @param timescale {object} a hash of track ids to timescale values."
      },
      {
        "lineNumber": 297,
        "line": " * @return {number} the earliest base media decode start time for the"
      },
      {
        "lineNumber": 298,
        "line": " * fragment, in seconds"
      },
      {
        "lineNumber": 299,
        "line": " */"
      },
      {
        "lineNumber": 300,
        "line": "  static getStartDTS (initData, fragment) {"
      }
    ],
    "codeParams": [
      "initData",
      "fragment"
    ],
    "docParams": [
      "timescale"
    ]
  },
  {
    "name": "MP4.moov",
    "filePath": "src/remux/mp4-generator.js",
    "lines": [
      {
        "lineNumber": 229,
        "line": "  /**"
      },
      {
        "lineNumber": 230,
        "line": " * @param tracks... (optional) {array} the tracks associated with this movie"
      },
      {
        "lineNumber": 231,
        "line": " */"
      },
      {
        "lineNumber": 232,
        "line": "  static moov (tracks) {"
      }
    ],
    "codeParams": [
      "tracks"
    ],
    "docParams": []
  },
  {
    "name": "TaskLoop#tick",
    "filePath": "src/task-loop.js",
    "lines": [
      {
        "lineNumber": 49,
        "line": "  /**"
      },
      {
        "lineNumber": 50,
        "line": "   *"
      },
      {
        "lineNumber": 51,
        "line": "   * @param {Wether to force async} forceAsync"
      },
      {
        "lineNumber": 52,
        "line": "   * @returns {boolean} True when async, false when sync"
      },
      {
        "lineNumber": 53,
        "line": "   */"
      },
      {
        "lineNumber": 54,
        "line": "  tick () {"
      }
    ],
    "codeParams": [],
    "docParams": [
      "forceAsync"
    ]
  }
]